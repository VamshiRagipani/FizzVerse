"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const buildURL = require("../../../../imgix-url-builder/dist/buildURL.cjs");
const buildWidthSrcSet = require("../../../../imgix-url-builder/dist/buildWidthSrcSet.cjs");
const isFilled = require("./isFilled.cjs");
const DEFAULT_WIDTHS = [640, 828, 1200, 2048, 3840];
const asImageWidthSrcSet = (field, config = {}) => {
  if (field && isFilled.imageThumbnail(field)) {
    let {
      widths = DEFAULT_WIDTHS,
      // eslint-disable-next-line prefer-const
      ...imgixParams
    } = config;
    const { url, dimensions, id: _id, alt: _alt, copyright: _copyright, edit: _edit, ...responsiveViews } = field;
    const responsiveViewObjects = Object.values(responsiveViews);
    if (widths === "thumbnails" && responsiveViewObjects.length < 1) {
      widths = DEFAULT_WIDTHS;
    }
    return {
      src: buildURL.buildURL(url, imgixParams),
      srcset: (
        // By this point, we know `widths` can only be
        // `"thubmanils"` if the field has thumbnails.
        widths === "thumbnails" ? [
          buildWidthSrcSet.buildWidthSrcSet(url, {
            ...imgixParams,
            widths: [dimensions.width]
          }),
          ...responsiveViewObjects.map((thumbnail) => {
            return buildWidthSrcSet.buildWidthSrcSet(thumbnail.url, {
              ...imgixParams,
              widths: [thumbnail.dimensions.width]
            });
          })
        ].join(", ") : buildWidthSrcSet.buildWidthSrcSet(field.url, {
          ...imgixParams,
          widths
        })
      )
    };
  } else {
    return null;
  }
};
exports.asImageWidthSrcSet = asImageWidthSrcSet;
//# sourceMappingURL=asImageWidthSrcSet.cjs.map
