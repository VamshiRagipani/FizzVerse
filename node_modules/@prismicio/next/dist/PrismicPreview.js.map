{"version":3,"file":"PrismicPreview.js","sources":["../../src/PrismicPreview.tsx"],"sourcesContent":["import Script from \"next/script\";\nimport { draftMode } from \"next/headers\";\nimport { useRouter as usePagesRouter } from \"next/router\";\nimport * as React from \"react\";\nimport * as prismic from \"@prismicio/client\";\n\nimport { PrismicPreviewClient } from \"./PrismicPreviewClient\";\n\n/**\n * Props for `<PrismicPreview>`.\n */\nexport type PrismicPreviewProps = {\n\t/**\n\t * The name of your Prismic repository. A Prismic Toolbar will be registered\n\t * using this repository.\n\t */\n\trepositoryName: string;\n\n\t/**\n\t * **Only used in the Pages Directory (/pages).**\n\t *\n\t * The URL of your app's Prismic preview endpoint (default: `/api/preview`).\n\t * This URL will be fetched on preview update events.\n\t */\n\tupdatePreviewURL?: string;\n\n\t/**\n\t * **Only used in the Pages Directory (/pages).**\n\t *\n\t * The URL of your app's exit preview endpoint (default: `/api/exit-preview`).\n\t * This URL will be fetched on preview exit events.\n\t */\n\texitPreviewURL?: string;\n\n\t/**\n\t * Children to render adjacent to the Prismic Toolbar.\n\t */\n\tchildren?: React.ReactNode;\n};\n\n/**\n * React component that sets up Prismic Previews using the Prismic Toolbar. When\n * the Prismic Toolbar send events to the browser, such as on preview updates\n * and exiting, this component will automatically refresh the page with the\n * changes.\n *\n * This component can be wrapped around your app or added anywhere in your app's\n * tree. It must be rendered on every page.\n */\nexport function PrismicPreview({\n\trepositoryName,\n\tchildren,\n\t...props\n}: PrismicPreviewProps): React.JSX.Element | Promise<React.JSX.Element> {\n\tconst toolbarSrc = prismic.getToolbarSrc(repositoryName);\n\tlet isDraftMode = false;\n\n\tconst result = (\n\t\t<>\n\t\t\t{children}\n\t\t\t<PrismicPreviewClient\n\t\t\t\trepositoryName={repositoryName}\n\t\t\t\tisDraftMode={isDraftMode}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t<Script src={toolbarSrc} strategy=\"lazyOnload\" />\n\t\t</>\n\t);\n\n\t// We need to check `draftMode()`, an async method, when running in the\n\t// App Router. The Pages Router does not support async components, so we\n\t// need to do some trickery to return a Promise in the App Router and\n\t// unwrapped JSX in the Pages Router.\n\t//\n\t// Alternatively, we could serve a special server-only\n\t// `<PrismicPreview>`, but that requires extra set up and depends on the\n\t// compiler to recognize the `react-server` entry point. It is an\n\t// undocumented feature that could be removed.\n\tlet isAppRouter = true;\n\ttry {\n\t\tusePagesRouter();\n\t\tisAppRouter = false;\n\t} catch {}\n\n\tif (isAppRouter) {\n\t\treturn new Promise(async (res) => {\n\t\t\tisDraftMode = (await draftMode()).isEnabled;\n\n\t\t\tres(result);\n\t\t});\n\t}\n\n\treturn result;\n}\n"],"names":["prismic.getToolbarSrc","_jsxs","_Fragment","_jsx"],"mappings":";;;;;;AAiDM,SAAU,eAAe,EAC9B,gBACA,UACA,GAAG,SACkB;AACf,QAAA,aAAaA,cAAsB,cAAc;AACvD,MAAI,cAAc;AAEZ,QAAA,SACLC,KAAAC,UAAA,EAAA,UAAA,CACE,UACDC,IAAC,sBAAoB,EACpB,gBACA,aACI,GAAA,OACH,GACFA,IAAC,UAAO,KAAK,YAAY,UAAS,aAAe,CAAA,CAAA,EAAA,CAAA;AAanD,MAAI,cAAc;AACd,MAAA;;AAEW,kBAAA;AAAA,EAAA,QACP;AAAA,EAAE;AAEV,MAAI,aAAa;AACT,WAAA,IAAI,QAAQ,OAAO,QAAO;AACjB,qBAAA,MAAM,UAAa,GAAA;AAElC,UAAI,MAAM;AAAA,IAAA,CACV;AAAA,EACD;AAEM,SAAA;AACR;"}