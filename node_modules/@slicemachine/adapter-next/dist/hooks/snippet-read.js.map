{"version":3,"file":"snippet-read.js","sources":["../../../src/hooks/snippet-read.ts"],"sourcesContent":["import type {\n\tSliceMachineHelpers,\n\tSnippetReadHook,\n} from \"@slicemachine/plugin-kit\";\nimport { stripIndent } from \"common-tags\";\n\nimport type { PluginOptions } from \"../types\";\n\nconst dotPath = (...segments: (string | string[])[]): string => {\n\treturn segments.flat().join(\".\");\n};\n\nconst format = async (input: string, helpers: SliceMachineHelpers) => {\n\tconst formattedInput = await helpers.format(input, undefined, {\n\t\tincludeNewlineAtEnd: false,\n\t\tprettier: {\n\t\t\tparser: \"typescript\",\n\t\t\tprintWidth: 60,\n\t\t},\n\t});\n\n\treturn formattedInput.endsWith(\";\")\n\t\t? formattedInput.substring(0, formattedInput.length - 1)\n\t\t: formattedInput;\n};\n\nexport const snippetRead: SnippetReadHook<PluginOptions> = async (\n\tdata,\n\t{ helpers },\n) => {\n\tconst { fieldPath, itemName } = data;\n\n\tconst label = \"React\";\n\n\tswitch (data.model.type) {\n\t\tcase \"StructuredText\": {\n\t\t\treturn [\n\t\t\t\t{\n\t\t\t\t\tlabel: `${label} (components)`,\n\t\t\t\t\tlanguage: \"tsx\",\n\t\t\t\t\tcode: await format(\n\t\t\t\t\t\tstripIndent`\n\t\t\t\t\t\t\t<PrismicRichText field={${dotPath(fieldPath)}} />\n\t\t\t\t\t\t`,\n\t\t\t\t\t\thelpers,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: `${label} (plain text)`,\n\t\t\t\t\tlanguage: \"tsx\",\n\t\t\t\t\tcode: await format(\n\t\t\t\t\t\tstripIndent`\n\t\t\t\t\t\t\t<PrismicText field={${dotPath(fieldPath)}} />\n\t\t\t\t\t\t`,\n\t\t\t\t\t\thelpers,\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t];\n\t\t}\n\n\t\tcase \"Link\": {\n\t\t\tconst repeat = data.model.config?.repeat ?? false;\n\t\t\tconst allowText = data.model.config?.allowText ?? false;\n\n\t\t\tconst allowVariants = Boolean(data.model.config?.variants);\n\t\t\tconst variant = (path: string, prefix: \"\" | \"\\n    \" = \"\") =>\n\t\t\t\tallowVariants ? `${prefix}className={${path}.variant}` : \"\";\n\n\t\t\tconst path = dotPath(fieldPath);\n\n\t\t\tlet code;\n\t\t\tif (!repeat && !allowText) {\n\t\t\t\tcode = await format(\n\t\t\t\t\tstripIndent`\n\t\t\t\t\t<PrismicNextLink field={${path}} ${variant(path)}>Link</PrismicNextLink>\n\t\t\t\t`,\n\t\t\t\t\thelpers,\n\t\t\t\t);\n\t\t\t} else if (!repeat && allowText) {\n\t\t\t\tcode = await format(\n\t\t\t\t\tstripIndent`\n\t\t\t\t\t<PrismicNextLink field={${path}} ${variant(path)}/>\n\t\t\t\t`,\n\t\t\t\t\thelpers,\n\t\t\t\t);\n\t\t\t} else if (repeat && !allowText) {\n\t\t\t\t// We cannot use `format` since this snippet contains invalid syntax.\n\t\t\t\t// Please ensure this snippet is manually formatted correctly.\n\t\t\t\t// Make sure to use spaces instead of tabs.\n\t\t\t\tcode = stripIndent`{${path}.map((link) => (\n  <PrismicNextLink\n    key={link.key}\n    field={link}${variant(\"link\", \"\\n    \")}>\n      Link\n  </PrismicNextLink>\n))}`;\n\t\t\t} else if (repeat && allowText) {\n\t\t\t\t// We cannot use `format` since this snippet contains invalid syntax.\n\t\t\t\t// Please ensure this snippet is manually formatted correctly.\n\t\t\t\t// Make sure to use spaces instead of tabs.\n\t\t\t\tcode = stripIndent`{${path}.map((link) => (\n  <PrismicNextLink\n    key={link.key}\n    field={link}${variant(\"link\", \"\\n    \")}\n  />\n))}`;\n\t\t\t} else {\n\t\t\t\tthrow new Error(\"Invalid configuration.\");\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tlanguage: \"tsx\",\n\t\t\t\tcode,\n\t\t\t};\n\t\t}\n\n\t\tcase \"Image\": {\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tlanguage: \"tsx\",\n\t\t\t\tcode: await format(\n\t\t\t\t\tstripIndent`\n\t\t\t\t\t\t<PrismicNextImage field={${dotPath(fieldPath)}} />\n\t\t\t\t\t`,\n\t\t\t\t\thelpers,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tcase \"Table\": {\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tlanguage: \"tsx\",\n\t\t\t\tcode: await format(\n\t\t\t\t\tstripIndent`\n\t\t\t\t\t\t<PrismicTable field={${dotPath(fieldPath)}} />\n\t\t\t\t\t`,\n\t\t\t\t\thelpers,\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\n\t\tcase \"Group\": {\n\t\t\t// We cannot use `format` since this snippet contains invalid syntax.\n\t\t\t// Please ensure this snippet is manually formatted correctly.\n\t\t\tconst code = stripIndent`\n\t\t\t\t{${dotPath(fieldPath)}.map((${itemName}) => (\n\t\t\t\t  // Render the ${itemName}\n\t\t\t\t))}\n\t\t\t`;\n\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tlanguage: \"tsx\",\n\t\t\t\tcode,\n\t\t\t};\n\t\t}\n\n\t\tcase \"Slices\": {\n\t\t\tconst code = await format(\n\t\t\t\tstripIndent`\n\t\t\t\t\t<SliceZone\n\t\t\t\t\t  slices={${dotPath(fieldPath)}}\n\t\t\t\t\t  components={components}\n\t\t\t\t\t/>\n\t\t\t\t`,\n\t\t\t\thelpers,\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tlanguage: \"tsx\",\n\t\t\t\tcode,\n\t\t\t};\n\t\t}\n\n\t\tcase \"GeoPoint\": {\n\t\t\t// We cannot use `format` since this snippet contains invalid syntax.\n\t\t\t// Please ensure this snippet is manually formatted correctly.\n\t\t\tconst code = stripIndent`\n\t\t\t\t{${dotPath(fieldPath, \"latitude\")}}, {${dotPath(fieldPath, \"longitude\")}}\n\t\t\t`;\n\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tlanguage: \"tsx\",\n\t\t\t\tcode,\n\t\t\t};\n\t\t}\n\n\t\tcase \"Embed\": {\n\t\t\tconst code = await format(\n\t\t\t\tstripIndent`\n\t\t\t\t\t<div dangerouslySetInnerHTML={{ __html: ${dotPath(fieldPath, \"html\")} }} />\n\t\t\t\t`,\n\t\t\t\thelpers,\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tlanguage: \"tsx\",\n\t\t\t\tcode,\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn {\n\t\t\t\tlabel,\n\t\t\t\tlanguage: \"tsx\",\n\t\t\t\t// We cannot use `format` since this snippet contains invalid syntax.\n\t\t\t\t// Please ensure this snippet is manually formatted correctly.\n\t\t\t\tcode: stripIndent`\n\t\t\t\t\t{${dotPath(fieldPath)}}\n\t\t\t\t`,\n\t\t\t};\n\t\t}\n\t}\n};\n"],"names":["path"],"mappings":"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"}