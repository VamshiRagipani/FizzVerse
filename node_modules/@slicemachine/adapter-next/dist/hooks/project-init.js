import { checkHasProjectFile, writeProjectFile } from "@slicemachine/plugin-kit/fs";
import { source } from "common-tags";
import { buildSrcPath } from "../lib/buildSrcPath.js";
import { checkHasAppRouter } from "../lib/checkHasAppRouter.js";
import { checkIsTypeScriptProject } from "../lib/checkIsTypeScriptProject.js";
import { getJSFileExtension } from "../lib/getJSFileExtension.js";
import { rejectIfNecessary } from "../lib/rejectIfNecessary.js";
import { upsertSliceLibraryIndexFile } from "../lib/upsertSliceLibraryIndexFile.js";
import { PRISMIC_ENVIRONMENT_ENVIRONMENT_VARIABLE_NAME } from "../constants.js";
const installDependencies = async ({ installDependencies: installDependencies2 }) => {
  await installDependencies2({
    dependencies: {
      "@prismicio/client": "latest",
      "@prismicio/react": "latest",
      "@prismicio/next": "latest"
    }
  });
};
const createPrismicIOFile = async ({ helpers, options }) => {
  const isTypeScriptProject = await checkIsTypeScriptProject({
    helpers,
    options
  });
  const hasSrcDirectory = await checkHasProjectFile({
    filename: "src",
    helpers
  });
  const hasAppRouter = await checkHasAppRouter({ helpers });
  const extension = await getJSFileExtension({ helpers, options });
  const filename = await buildSrcPath({
    filename: `prismicio.${extension}`,
    helpers
  });
  if (await checkHasProjectFile({ filename, helpers })) {
    return;
  }
  let importsContents;
  let createClientContents;
  if (hasAppRouter) {
    if (isTypeScriptProject) {
      importsContents = source`
				import {
					createClient as baseCreateClient,
					type ClientConfig,
					type Route,
				} from "@prismicio/client";
				import { enableAutoPreviews } from "@prismicio/next";
				import sm from "${hasSrcDirectory ? ".." : "."}/slicemachine.config.json";
			`;
      createClientContents = source`
				/**
				 * Creates a Prismic client for the project's repository. The client is used to
				 * query content from the Prismic API.
				 *
				 * @param config - Configuration for the Prismic client.
				 */
				export const createClient = (config: ClientConfig = {}) => {
					const client = baseCreateClient(repositoryName, {
						routes,
						fetchOptions:
							process.env.NODE_ENV === 'production'
								? { next: { tags: ['prismic'] }, cache: 'force-cache' }
								: { next: { revalidate: 5 } },
						...config,
					});

					enableAutoPreviews({ client });

					return client;
				};
			`;
    } else {
      importsContents = source`
				import { createClient as baseCreateClient } from "@prismicio/client";
				import { enableAutoPreviews } from "@prismicio/next";
				import sm from "${hasSrcDirectory ? ".." : "."}/slicemachine.config.json";
			`;
      createClientContents = source`
				/**
				 * Creates a Prismic client for the project's repository. The client is used to
				 * query content from the Prismic API.
				 *
				 * @param {import("@prismicio/client").ClientConfig} config - Configuration for the Prismic client.
				 */
				export const createClient = (config = {}) => {
					const client = baseCreateClient(repositoryName, {
						routes,
						fetchOptions:
							process.env.NODE_ENV === 'production'
								? { next: { tags: ['prismic'] }, cache: 'force-cache' }
								: { next: { revalidate: 5 } },
						...config,
					});

					enableAutoPreviews({ client });

					return client;
				};
			`;
    }
  } else {
    if (isTypeScriptProject) {
      importsContents = source`
				import { createClient as baseCreateClient, type Routes } from "@prismicio/client";
				import { enableAutoPreviews, type CreateClientConfig } from "@prismicio/next/pages";
				import sm from "${hasSrcDirectory ? ".." : "."}/slicemachine.config.json";
			`;
      createClientContents = source`
				/**
				 * Creates a Prismic client for the project's repository. The client is used to
				 * query content from the Prismic API.
				 *
				 * @param config - Configuration for the Prismic client.
				 */
				export const createClient = ({ previewData, req, ...config }: CreateClientConfig = {}) => {
					const client = baseCreateClient(repositoryName, {
						routes,
						...config,
					});

					enableAutoPreviews({ client, previewData, req });

					return client;
				};
			`;
    } else {
      importsContents = source`
				import { createClient as baseCreateClient } from "@prismicio/client";
				import { enableAutoPreviews } from "@prismicio/next/pages";
				import sm from "${hasSrcDirectory ? ".." : "."}/slicemachine.config.json";
			`;
      createClientContents = source`
				/**
				 * Creates a Prismic client for the project's repository. The client is used to
				 * query content from the Prismic API.
				 *
				 * @param {import("@prismicio/next/pages").CreateClientConfig} config - Configuration for the Prismic client.
				 */
				export const createClient = ({ previewData, req, ...config } = {}) => {
					const client = baseCreateClient(repositoryName, {
						routes,
						...config,
					});

					enableAutoPreviews({ client, previewData, req });

					return client;
				};
			`;
    }
  }
  let contents;
  if (isTypeScriptProject) {
    contents = source`
			${importsContents}

			/**
			 * The project's Prismic repository name.
			 */
			export const repositoryName =
				process.env.${PRISMIC_ENVIRONMENT_ENVIRONMENT_VARIABLE_NAME} || sm.repositoryName;

			/**
			 * A list of Route Resolver objects that define how a document's \`url\` field is resolved.
			 *
			 * {@link https://prismic.io/docs/route-resolver#route-resolver}
			 */
			// TODO: Update the routes array to match your project's route structure.
			const routes: Route[] = [
				// Examples:
				// { type: "homepage", path: "/" },
				// { type: "page", path: "/:uid" },
			];

			${createClientContents}
		`;
  } else {
    contents = source`
			${importsContents}

			/**
			 * The project's Prismic repository name.
			 */
			export const repositoryName =
				process.env.${PRISMIC_ENVIRONMENT_ENVIRONMENT_VARIABLE_NAME} || sm.repositoryName;

			/**
			 * A list of Route Resolver objects that define how a document's \`url\` field is resolved.
			 *
			 * {@link https://prismic.io/docs/route-resolver#route-resolver}
			 *
			 * @type {import("@prismicio/client").Route[]}
			 */
			// TODO: Update the routes array to match your project's route structure.
			const routes = [
				// Examples:
				// { type: "homepage", path: "/" },
				// { type: "page", path: "/:uid" },
			];

			${createClientContents}
		`;
  }
  await writeProjectFile({
    filename,
    contents,
    format: options.format,
    helpers
  });
};
const createSliceSimulatorPage = async ({ helpers, options }) => {
  const isTypeScriptProject = await checkIsTypeScriptProject({
    helpers,
    options
  });
  const hasAppRouter = await checkHasAppRouter({ helpers });
  const extension = await getJSFileExtension({ helpers, options, jsx: true });
  const filename = await buildSrcPath({
    filename: hasAppRouter ? `app/slice-simulator/page.${extension}` : `pages/slice-simulator.${extension}`,
    helpers
  });
  if (await checkHasProjectFile({ filename, helpers })) {
    return;
  }
  let contents;
  if (hasAppRouter) {
    if (isTypeScriptProject) {
      contents = source`
				import {
					SliceSimulator,
					SliceSimulatorParams,
					getSlices,
				} from "@slicemachine/adapter-next/simulator";
				import { SliceZone } from "@prismicio/react";

				import { components } from "../../slices";

				export default async function SliceSimulatorPage({
					searchParams,
				}: SliceSimulatorParams) {
					const { state } = await searchParams
					const slices = getSlices(state);

					return (
						<SliceSimulator>
							<SliceZone slices={slices} components={components} />
						</SliceSimulator>
					);
				}
			`;
    } else {
      contents = source`
				import {
					SliceSimulator,
					getSlices,
				} from "@slicemachine/adapter-next/simulator";
				import { SliceZone } from "@prismicio/react";

				import { components } from "../../slices";

				export default async function SliceSimulatorPage({ searchParams }) {
					const { state } = await searchParams
					const slices = getSlices(state);

					return (
						<SliceSimulator>
							<SliceZone slices={slices} components={components} />
						</SliceSimulator>
					);
				}
			`;
    }
  } else {
    contents = source`
			import { SliceSimulator } from "@slicemachine/adapter-next/simulator";
			import { SliceZone } from "@prismicio/react";

			import { components } from "../slices";

			export default function SliceSimulatorPage() {
				return (
					<SliceSimulator
						sliceZone={(props) => <SliceZone {...props} components={components} />}
					/>
				);
			}
		`;
  }
  await writeProjectFile({
    filename,
    contents,
    format: options.format,
    helpers
  });
};
const createPreviewRoute = async ({ helpers, options }) => {
  const hasAppRouter = await checkHasAppRouter({ helpers });
  const isTypeScriptProject = await checkIsTypeScriptProject({
    helpers,
    options
  });
  const extension = await getJSFileExtension({ helpers, options });
  const filename = await buildSrcPath({
    filename: hasAppRouter ? `app/api/preview/route.${extension}` : `pages/api/preview.${extension}`,
    helpers
  });
  if (await checkHasProjectFile({ filename, helpers })) {
    return;
  }
  let contents;
  if (hasAppRouter) {
    if (isTypeScriptProject) {
      contents = source`
				import { NextRequest } from "next/server";
				import { redirectToPreviewURL } from "@prismicio/next";

				import { createClient } from "../../../prismicio";

				export async function GET(request: NextRequest) {
					const client = createClient();

					return await redirectToPreviewURL({ client, request });
				}
			`;
    } else {
      contents = source`
				import { redirectToPreviewURL } from "@prismicio/next";

				import { createClient } from "../../../prismicio";

				export async function GET(request) {
					const client = createClient();

					return await redirectToPreviewURL({ client, request });
				}
			`;
    }
  } else {
    if (isTypeScriptProject) {
      contents = source`
				import { NextApiRequest, NextApiResponse } from "next";
				import { setPreviewData, redirectToPreviewURL } from "@prismicio/next/pages";

				import { createClient } from "../../prismicio";

				export default async function handler(req: NextApiRequest, res: NextApiResponse) {
					const client = createClient({ req });

					setPreviewData({ req, res });

					return await redirectToPreviewURL({ req, res, client });
				};
			`;
    } else {
      contents = source`
				import { setPreviewData, redirectToPreviewURL } from "@prismicio/next/pages";

				import { createClient } from "../../prismicio";

				export default async function handler(req, res) {
					const client = createClient({ req });

					setPreviewData({ req, res });

					return await redirectToPreviewURL({ req, res, client });
				};
			`;
    }
  }
  await writeProjectFile({
    filename,
    contents,
    format: options.format,
    helpers
  });
};
const createExitPreviewRoute = async ({ helpers, options }) => {
  const hasAppRouter = await checkHasAppRouter({ helpers });
  const isTypeScriptProject = await checkIsTypeScriptProject({
    helpers,
    options
  });
  const extension = await getJSFileExtension({ helpers, options });
  const filename = await buildSrcPath({
    filename: hasAppRouter ? `app/api/exit-preview/route.${extension}` : `pages/api/exit-preview.${extension}`,
    helpers
  });
  if (await checkHasProjectFile({ filename, helpers })) {
    return;
  }
  let contents;
  if (hasAppRouter) {
    contents = source`
			import { exitPreview } from "@prismicio/next";

			export function GET() {
				return exitPreview();
			}
		`;
  } else {
    if (isTypeScriptProject) {
      contents = source`
				import { NextApiRequest, NextApiResponse } from "next";
				import { exitPreview } from "@prismicio/next/pages";

				export default function handler(req: NextApiRequest, res: NextApiResponse) {
					return exitPreview({ req, res });
				}
			`;
    } else {
      contents = source`
				import { exitPreview } from "@prismicio/next/pages";

				export default function handler(req, res) {
					return exitPreview({ req, res });
				}
			`;
    }
  }
  await writeProjectFile({
    filename,
    contents,
    format: options.format,
    helpers
  });
};
const modifySliceMachineConfig = async ({ helpers, options, actions }) => {
  var _a;
  const hasSrcDirectory = await checkHasProjectFile({
    filename: "src",
    helpers
  });
  const project = await helpers.getProject();
  (_a = project.config).localSliceSimulatorURL || (_a.localSliceSimulatorURL = "http://localhost:3000/slice-simulator");
  if (hasSrcDirectory && project.config.libraries && JSON.stringify(project.config.libraries) === JSON.stringify(["./slices"])) {
    const sliceLibrary = await actions.readSliceLibrary({
      libraryID: project.config.libraries[0]
    });
    if (sliceLibrary.sliceIDs.length < 1) {
      project.config.libraries = ["./src/slices"];
    }
  }
  await helpers.updateSliceMachineConfig(project.config, {
    format: options.format
  });
};
const createRevalidateRoute = async ({ helpers, options }) => {
  const hasAppRouter = await checkHasAppRouter({ helpers });
  if (!hasAppRouter) {
    return;
  }
  const extension = await getJSFileExtension({ helpers, options });
  const filename = await buildSrcPath({
    filename: `app/api/revalidate/route.${extension}`,
    helpers
  });
  if (await checkHasProjectFile({ filename, helpers })) {
    return;
  }
  const contents = source`
		import { NextResponse } from "next/server";
		import { revalidateTag } from "next/cache";

		export async function POST() {
			revalidateTag("prismic");

			return NextResponse.json({ revalidated: true, now: Date.now() });
		}
	`;
  await writeProjectFile({
    filename,
    contents,
    format: options.format,
    helpers
  });
};
const upsertSliceLibraryIndexFiles = async (context) => {
  const project = await context.helpers.getProject();
  if (!project.config.libraries) {
    return;
  }
  await Promise.all(project.config.libraries.map(async (libraryID) => {
    await upsertSliceLibraryIndexFile({ libraryID, ...context });
  }));
};
const projectInit = async ({ installDependencies: _installDependencies }, context) => {
  rejectIfNecessary(await Promise.allSettled([
    installDependencies({ installDependencies: _installDependencies }),
    modifySliceMachineConfig(context),
    createPrismicIOFile(context),
    createSliceSimulatorPage(context),
    createPreviewRoute(context),
    createExitPreviewRoute(context),
    createRevalidateRoute(context)
  ]));
  await upsertSliceLibraryIndexFiles(context);
};
export {
  projectInit
};
//# sourceMappingURL=project-init.js.map
