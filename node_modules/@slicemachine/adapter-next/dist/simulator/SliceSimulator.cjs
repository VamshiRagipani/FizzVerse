'use client';
'use client';
"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const react = require("react");
const kit = require("@prismicio/simulator/kit");
const SliceSimulatorWrapper = require("./SliceSimulatorWrapper.cjs");
const simulatorManager = new kit.SimulatorManager();
const SliceSimulator = ({ background, zIndex, className, ...restProps }) => {
  if (!("sliceZone" in restProps)) {
    throw new Error("A sliceZone prop must be provided when <SliceZone> is rendered in a Client Component. Add a sliceZone prop or convert your simulator to a Server Component with the getSlices helper.");
  }
  const [slices, setSlices] = react.useState(() => kit.getDefaultSlices());
  const [message, setMessage] = react.useState(() => kit.getDefaultMessage());
  react.useEffect(() => {
    simulatorManager.state.on(kit.StateEventType.Slices, (_slices) => {
      setSlices(_slices);
    }, "simulator-slices");
    simulatorManager.state.on(kit.StateEventType.Message, (_message) => {
      setMessage(_message);
    }, "simulator-message");
    simulatorManager.init();
    return () => {
      simulatorManager.state.off(kit.StateEventType.Slices, "simulator-slices");
      simulatorManager.state.off(kit.StateEventType.Message, "simulator-message");
    };
  }, []);
  const SliceZoneComp = restProps.sliceZone;
  return jsxRuntime.jsx(SliceSimulatorWrapper.SliceSimulatorWrapper, { message, hasSlices: slices.length > 0, background, zIndex, className, children: jsxRuntime.jsx(SliceZoneComp, { slices }) });
};
exports.SliceSimulator = SliceSimulator;
//# sourceMappingURL=SliceSimulator.cjs.map
