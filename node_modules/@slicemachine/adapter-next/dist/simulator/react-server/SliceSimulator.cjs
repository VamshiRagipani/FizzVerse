'use client';
'use client';
"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const react = require("react");
const navigation = require("next/navigation");
const kit = require("@prismicio/simulator/kit");
const lzString = require("lz-string");
const SliceSimulatorWrapper = require("../SliceSimulatorWrapper.cjs");
const getSlices = require("./getSlices.cjs");
const STATE_PARAMS_KEY = "state";
const simulatorManager = new kit.SimulatorManager();
const SliceSimulator = ({ children, background, zIndex, className }) => {
  const [message, setMessage] = react.useState(() => kit.getDefaultMessage());
  const router = navigation.useRouter();
  const state = typeof window !== "undefined" ? new URL(window.location.href).searchParams.get(STATE_PARAMS_KEY) : void 0;
  const hasSlices = getSlices.getSlices(state).length > 0;
  react.useEffect(() => {
    simulatorManager.state.on(kit.StateEventType.Slices, (newSlices) => {
      const url = new URL(window.location.href);
      url.searchParams.set(STATE_PARAMS_KEY, lzString.compressToEncodedURIComponent(JSON.stringify(newSlices)));
      window.history.replaceState(null, "", url);
      setTimeout(() => router.refresh(), 0);
    }, "simulator-slices");
    simulatorManager.state.on(kit.StateEventType.Message, (newMessage) => setMessage(newMessage), "simulator-message");
    simulatorManager.init();
    return () => {
      simulatorManager.state.off(kit.StateEventType.Slices, "simulator-slices");
      simulatorManager.state.off(kit.StateEventType.Message, "simulator-message");
    };
  }, []);
  return jsxRuntime.jsx(SliceSimulatorWrapper.SliceSimulatorWrapper, { message, hasSlices, background, zIndex, className, children });
};
exports.SliceSimulator = SliceSimulator;
//# sourceMappingURL=SliceSimulator.cjs.map
