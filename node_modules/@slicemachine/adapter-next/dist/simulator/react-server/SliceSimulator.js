'use client';
'use client';
import { jsx } from "react/jsx-runtime";
import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { SimulatorManager, getDefaultMessage, StateEventType } from "@prismicio/simulator/kit";
import { compressToEncodedURIComponent } from "lz-string";
import { SliceSimulatorWrapper } from "../SliceSimulatorWrapper.js";
import { getSlices } from "./getSlices.js";
const STATE_PARAMS_KEY = "state";
const simulatorManager = new SimulatorManager();
const SliceSimulator = ({ children, background, zIndex, className }) => {
  const [message, setMessage] = useState(() => getDefaultMessage());
  const router = useRouter();
  const state = typeof window !== "undefined" ? new URL(window.location.href).searchParams.get(STATE_PARAMS_KEY) : void 0;
  const hasSlices = getSlices(state).length > 0;
  useEffect(() => {
    simulatorManager.state.on(StateEventType.Slices, (newSlices) => {
      const url = new URL(window.location.href);
      url.searchParams.set(STATE_PARAMS_KEY, compressToEncodedURIComponent(JSON.stringify(newSlices)));
      window.history.replaceState(null, "", url);
      setTimeout(() => router.refresh(), 0);
    }, "simulator-slices");
    simulatorManager.state.on(StateEventType.Message, (newMessage) => setMessage(newMessage), "simulator-message");
    simulatorManager.init();
    return () => {
      simulatorManager.state.off(StateEventType.Slices, "simulator-slices");
      simulatorManager.state.off(StateEventType.Message, "simulator-message");
    };
  }, []);
  return jsx(SliceSimulatorWrapper, { message, hasSlices, background, zIndex, className, children });
};
export {
  SliceSimulator
};
//# sourceMappingURL=SliceSimulator.js.map
